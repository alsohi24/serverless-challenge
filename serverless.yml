service: serverless-challenge

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    PORT: ${env:PORT, '3000'}
    SWAPI_PEOPLE_URL: ${env:SWAPI_PEOPLE_URL, 'https://swapi.dev/api/people'}
    SWAPI_VEHICLES_URL: ${env:SWAPI_VEHICLES_URL, 'https://swapi.dev/api/vehicles/'}
    OPENF1_DRIVERS_URL: ${env:OPENF1_DRIVERS_URL, 'https://api.openf1.org/v1/drivers'}
    AWS_DYNAMODB_TABLE: ${env:AWS_DYNAMODB_TABLE, 'podracers'}
    REDIS_HOST: ${env:REDIS_HOST, '127.0.0.1'}
    REDIS_PORT: ${env:REDIS_PORT, '6379'}
    REDIS_TTL: ${env:REDIS_TTL, '1800'}
    REDIS_TLS: ${env:REDIS_TLS, 'false'}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource:
            - !GetAtt PodracersTable.Arn

functions:
  api:
    handler: src/server.handler
    timeout: 40
    events:
      - httpApi: "*"

resources:
  Resources:
    PodracersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.AWS_DYNAMODB_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    # RedisCluster:
    #   Type: "AWS::ElastiCache::CacheCluster"
    #   Properties:
    #     CacheClusterId: "redis-cluster"
    #     CacheNodeType: "cache.t3.micro"
    #     Engine: "redis"
    #     NumCacheNodes: 1
    #     ClusterName: "redis-cluster"

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-offline-redis-server
